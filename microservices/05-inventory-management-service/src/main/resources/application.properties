# Inventory Management Service Configuration

# Server Configuration
server.port=8084
server.host=localhost

# Database Configuration
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=inventory_user
quarkus.datasource.password=inventory_password
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/inventory_db

# JPA/Hibernate Configuration
quarkus.hibernate-orm.database.generation=update
quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.log.format-sql=true

# Connection Pool Configuration
quarkus.datasource.jdbc.min-size=5
quarkus.datasource.jdbc.max-size=20
quarkus.datasource.jdbc.acquisition-timeout=10s

# Logging Configuration
quarkus.log.level=INFO
quarkus.log.category."com.skiresort.inventory".level=DEBUG
quarkus.log.console.enable=true
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n

# Health Check Configuration
quarkus.health.extensions.enabled=true

# Metrics Configuration
quarkus.micrometer.enabled=true
quarkus.micrometer.export.prometheus.enabled=true

# OpenAPI Configuration
quarkus.swagger-ui.always-include=true
quarkus.swagger-ui.path=/swagger-ui

# Application Information
app.name=Inventory Management Service
app.version=1.0.0
app.description=Equipment inventory, availability tracking, and reservation management

# Business Configuration
inventory.reservation.default-expiry-minutes=30
inventory.low-stock.check-interval-minutes=60
inventory.expired-reservation.cleanup-interval-minutes=30

# Cache Configuration (Redis)
quarkus.redis.hosts=redis://localhost:6379
quarkus.redis.timeout=2s

# Message Queue Configuration (Kafka)
kafka.bootstrap.servers=localhost:9092
mp.messaging.outgoing.inventory-events.connector=smallrye-kafka
mp.messaging.outgoing.inventory-events.topic=inventory-events
mp.messaging.outgoing.inventory-events.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.inventory-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer

# Security Configuration
quarkus.security.cors=true
quarkus.security.cors.origins=http://localhost:3000,http://localhost:8080
quarkus.security.cors.methods=GET,POST,PUT,DELETE,OPTIONS
quarkus.security.cors.headers=accept,authorization,content-type,x-requested-with

# Development Configuration
%dev.quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/inventory_dev_db
%dev.quarkus.hibernate-orm.database.generation=drop-and-create
%dev.quarkus.hibernate-orm.sql-load-script=import-dev.sql

# Test Configuration
%test.quarkus.datasource.db-kind=h2
%test.quarkus.datasource.jdbc.url=jdbc:h2:mem:testdb;MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE;DEFAULT_NULL_ORDERING=HIGH
%test.quarkus.hibernate-orm.database.generation=drop-and-create
%test.quarkus.hibernate-orm.sql-load-script=import-test.sql

# Production Configuration
%prod.quarkus.log.level=WARN
%prod.quarkus.log.category."com.skiresort.inventory".level=INFO
%prod.quarkus.hibernate-orm.log.sql=false
%prod.quarkus.hibernate-orm.log.format-sql=false
