
services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: ski-resort-postgres
    environment:
      POSTGRES_DB: skiresortdb
      POSTGRES_USER: skiresort
      POSTGRES_PASSWORD: skiresort
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - ski-resort-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U skiresort -d skiresortdb"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: ski-resort-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ski-resort-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Application Services
  api-gateway:
    build:
      context: ./01-api-gateway-service
      dockerfile: Dockerfile
    container_name: ski-resort-gateway
    ports:
      - "8080:8080"
    environment:
      - JAVA_OPTS=-Xms512m -Xmx1024m
      - DATABASE_URL=jdbc:postgresql://postgres:5432/skiresortdb
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ski-resort-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api-gateway-service/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  user-management:
    build:
      context: ./02-user-management-service
      dockerfile: Dockerfile
    container_name: ski-resort-user-management
    ports:
      - "8081:8080"
    environment:
      - JAVA_OPTS=-Xms512m -Xmx1024m
      - DATABASE_URL=jdbc:postgresql://postgres:5432/skiresortdb
      - DATABASE_USER=skiresort
      - DATABASE_PASSWORD=skiresort
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ski-resort-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/user-management-service/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  product-catalog:
    build:
      context: ./03-product-catalog-service
      dockerfile: Dockerfile
    container_name: ski-resort-product-catalog
    ports:
      - "8082:8080"
    environment:
      - JAVA_OPTS=-Xms512m -Xmx1024m
      - DATABASE_URL=jdbc:postgresql://postgres:5432/skiresortdb
      - DATABASE_USER=skiresort
      - DATABASE_PASSWORD=skiresort
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ski-resort-network

  authentication:
    build:
      context: ./04-authentication-service
      dockerfile: Dockerfile
    container_name: ski-resort-authentication
    ports:
      - "8083:8080"
    environment:
      - JAVA_OPTS=-Xms512m -Xmx1024m
      - DATABASE_URL=jdbc:postgresql://postgres:5432/skiresortdb
      - DATABASE_USER=skiresort
      - DATABASE_PASSWORD=skiresort
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-production-jwt-secret-key-here
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ski-resort-network

  inventory-management:
    build:
      context: ./05-inventory-management-service
      dockerfile: Dockerfile
    container_name: ski-resort-inventory
    ports:
      - "8084:8080"
    environment:
      - JAVA_OPTS=-Xms512m -Xmx1024m
      - DATABASE_URL=jdbc:postgresql://postgres:5432/skiresortdb
      - DATABASE_USER=skiresort
      - DATABASE_PASSWORD=skiresort
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ski-resort-network

  order-management:
    build:
      context: ./06-order-management-service
      dockerfile: Dockerfile
    container_name: ski-resort-order-management
    ports:
      - "8085:8080"
    environment:
      - JAVA_OPTS=-Xms512m -Xmx1024m
      - DATABASE_URL=jdbc:postgresql://postgres:5432/skiresortdb
      - DATABASE_USER=skiresort
      - DATABASE_PASSWORD=skiresort
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ski-resort-network

  payment:
    build:
      context: ./07-payment-service
      dockerfile: Dockerfile
    container_name: ski-resort-payment
    ports:
      - "8086:8080"
    environment:
      - JAVA_OPTS=-Xms512m -Xmx1024m
      - DATABASE_URL=jdbc:postgresql://postgres:5432/skiresortdb
      - DATABASE_USER=skiresort
      - DATABASE_PASSWORD=skiresort
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ski-resort-network

  shopping-cart:
    build:
      context: ./08-shopping-cart-service
      dockerfile: Dockerfile
    container_name: ski-resort-shopping-cart
    ports:
      - "8087:8080"
    environment:
      - JAVA_OPTS=-Xms512m -Xmx1024m
      - DATABASE_URL=jdbc:postgresql://postgres:5432/skiresortdb
      - DATABASE_USER=skiresort
      - DATABASE_PASSWORD=skiresort
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ski-resort-network

  coupon-discount:
    build:
      context: ./09-coupon-discount-service
      dockerfile: Dockerfile
    container_name: ski-resort-coupon-discount
    ports:
      - "8088:8080"
    environment:
      - JAVA_OPTS=-Xms512m -Xmx1024m
      - DATABASE_URL=jdbc:postgresql://postgres:5432/skiresortdb
      - DATABASE_USER=skiresort
      - DATABASE_PASSWORD=skiresort
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ski-resort-network

  points-loyalty:
    build:
      context: ./10-points-loyalty-service
      dockerfile: Dockerfile
    container_name: ski-resort-points-loyalty
    ports:
      - "8089:8080"
    environment:
      - JAVA_OPTS=-Xms512m -Xmx1024m
      - DATABASE_URL=jdbc:postgresql://postgres:5432/skiresortdb
      - DATABASE_USER=skiresort
      - DATABASE_PASSWORD=skiresort
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ski-resort-network

  ai-support:
    build:
      context: ./11-ai-support-service
      dockerfile: Dockerfile
    container_name: ski-resort-ai-support
    ports:
      - "8090:8080"
    environment:
      - JAVA_OPTS=-Xms512m -Xmx1024m
      - DATABASE_URL=jdbc:postgresql://postgres:5432/skiresortdb
      - DATABASE_USER=skiresort
      - DATABASE_PASSWORD=skiresort
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ski-resort-network

  frontend:
    build:
      context: ./12-frontend-service
      dockerfile: Dockerfile
    container_name: ski-resort-frontend
    ports:
      - "8091:8080"
    environment:
      - JAVA_OPTS=-Xms512m -Xmx1024m
      - API_GATEWAY_URL=http://api-gateway:8080
    depends_on:
      - api-gateway
    networks:
      - ski-resort-network

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: ski-resort-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - ski-resort-network

  grafana:
    image: grafana/grafana:latest
    container_name: ski-resort-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - ski-resort-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  ski-resort-network:
    driver: bridge
