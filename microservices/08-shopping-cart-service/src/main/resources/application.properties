# Application configuration
quarkus.application.name=shopping-cart-service
quarkus.application.version=1.0.0

# HTTP configuration
quarkus.http.port=8088
quarkus.http.host=0.0.0.0
quarkus.http.cors=true
quarkus.http.cors.origins=*

# Database configuration
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=${DB_USERNAME:cartuser}
quarkus.datasource.password=${DB_PASSWORD:cartpass}
quarkus.datasource.jdbc.url=${DB_URL:jdbc:postgresql://localhost:5433/cartdb}
quarkus.datasource.jdbc.min-size=5
quarkus.datasource.jdbc.max-size=20

# Test profile: Use PostgreSQL Dev Services (Testcontainers)
%test.quarkus.datasource.devservices.enabled=true
%test.quarkus.datasource.devservices.image-name=postgres:16
%test.quarkus.datasource.db-kind=postgresql
# Override production database settings for tests
%test.quarkus.datasource.username=
%test.quarkus.datasource.password=
%test.quarkus.datasource.jdbc.url=

# Hibernate configuration
quarkus.hibernate-orm.database.generation=update
quarkus.hibernate-orm.sql-load-script=import.sql
quarkus.hibernate-orm.log.sql=false

# Test profile: Use drop-and-create for clean tests
%test.quarkus.hibernate-orm.database.generation=drop-and-create

# Flyway configuration
quarkus.flyway.migrate-at-start=true
quarkus.flyway.locations=classpath:db/migration

# Test profile: Disable Flyway for tests since we use drop-and-create
%test.quarkus.flyway.migrate-at-start=false

# Redis configuration
quarkus.redis.hosts=redis://${REDIS_HOST:localhost}:${REDIS_PORT:6379}
quarkus.redis.password=${REDIS_PASSWORD:}
quarkus.redis.database=0
quarkus.redis.timeout=5s
quarkus.redis.max-pool-size=20
quarkus.redis.max-pool-waiting=30

# Test profile: Disable Redis for tests
%test.quarkus.redis.hosts=

# Kafka configuration
kafka.bootstrap.servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
mp.messaging.outgoing.cart-events.connector=smallrye-kafka
mp.messaging.outgoing.cart-events.topic=cart.events
mp.messaging.outgoing.cart-events.value.serializer=io.quarkus.kafka.client.serialization.JsonObjectSerializer

mp.messaging.incoming.product-events.connector=smallrye-kafka
mp.messaging.incoming.product-events.topic=product.events
mp.messaging.incoming.product-events.value.deserializer=io.quarkus.kafka.client.serialization.JsonObjectDeserializer

mp.messaging.incoming.inventory-events.connector=smallrye-kafka
mp.messaging.incoming.inventory-events.topic=inventory.events
mp.messaging.incoming.inventory-events.value.deserializer=io.quarkus.kafka.client.serialization.JsonObjectDeserializer

# Test profile: Disable Kafka for tests
%test.kafka.bootstrap.servers=
%test.mp.messaging.outgoing.cart-events.connector=
%test.mp.messaging.incoming.product-events.connector=
%test.mp.messaging.incoming.inventory-events.connector=

# External service configuration
quarkus.rest-client.product-catalog-service.url=${PRODUCT_CATALOG_URL:http://localhost:8081}
quarkus.rest-client.product-catalog-service.scope=jakarta.inject.Singleton
quarkus.rest-client.product-catalog-service.connection-timeout=5000
quarkus.rest-client.product-catalog-service.read-timeout=10000

quarkus.rest-client.inventory-management-service.url=${INVENTORY_SERVICE_URL:http://localhost:8082}
quarkus.rest-client.inventory-management-service.scope=jakarta.inject.Singleton

quarkus.rest-client.user-management-service.url=${USER_SERVICE_URL:http://localhost:8083}
quarkus.rest-client.user-management-service.scope=jakarta.inject.Singleton

quarkus.rest-client.coupon-discount-service.url=${COUPON_SERVICE_URL:http://localhost:8089}
quarkus.rest-client.coupon-discount-service.scope=jakarta.inject.Singleton
quarkus.rest-client.coupon-discount-service.connection-timeout=5000
quarkus.rest-client.coupon-discount-service.read-timeout=10000

quarkus.rest-client.loyalty-points-service.url=${LOYALTY_SERVICE_URL:http://localhost:8090}
quarkus.rest-client.loyalty-points-service.scope=jakarta.inject.Singleton
quarkus.rest-client.loyalty-points-service.connection-timeout=5000
quarkus.rest-client.loyalty-points-service.read-timeout=10000

quarkus.rest-client.authentication-service.url=${AUTH_SERVICE_URL:http://localhost:8084}
quarkus.rest-client.authentication-service.scope=jakarta.inject.Singleton
quarkus.rest-client.authentication-service.connection-timeout=5000
quarkus.rest-client.authentication-service.read-timeout=10000

# Security configuration (JWT) - Disabled for development/testing
# mp.jwt.verify.publickey.location=${JWT_PUBLIC_KEY_LOCATION:META-INF/publicKey.pem}
# mp.jwt.verify.issuer=${JWT_ISSUER:https://auth.skishop.com}

# OIDC configuration - Disable for development/testing
quarkus.oidc.tenant-enabled=false

# JWT configuration - Disable for development/testing
quarkus.smallrye-jwt.enabled=false

# Health check configuration
quarkus.smallrye-health.enabled=true
quarkus.smallrye-health.ui.enable=true

# OpenAPI configuration
quarkus.smallrye-openapi.path=/api-docs
quarkus.swagger-ui.always-include=true
quarkus.swagger-ui.path=/swagger-ui

# Metrics configuration
quarkus.micrometer.enabled=true
quarkus.micrometer.registry-enabled-default=true
quarkus.micrometer.export.prometheus.enabled=true
quarkus.micrometer.export.prometheus.path=/metrics

# Distributed tracing configuration
quarkus.opentelemetry.enabled=true
quarkus.opentelemetry.tracer.exporter.otlp.endpoint=${OTLP_ENDPOINT:http://localhost:4317}
quarkus.opentelemetry.tracer.resource-attributes=service.name=shopping-cart-service,service.version=1.0.0

# Fault tolerance configuration
quarkus.fault-tolerance.enabled=true

# Caching configuration
quarkus.cache.caffeine.cart-summaries.maximum-size=1000
quarkus.cache.caffeine.cart-summaries.expire-after-write=PT30M

# Application specific configuration
cart.batch.size=${CART_BATCH_SIZE:50}
cart.concurrent.operations=${CART_CONCURRENT_OPS:10}
cart.abandoned.cleanup.interval=${CART_CLEANUP_INTERVAL:PT6H}
cart.session.timeout=${CART_SESSION_TIMEOUT:PT8H}

# Logging configuration
quarkus.log.level=INFO
quarkus.log.category."com.skishop.cart".level=DEBUG
quarkus.log.console.format=%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p [%c{3.}] (%t) %s%e%n

# Dev profile
%dev.quarkus.log.category."com.skishop.cart".level=DEBUG
%dev.quarkus.hibernate-orm.log.sql=true
%dev.quarkus.redis.database=1

# Production profile
%prod.quarkus.datasource.jdbc.max-size=50
%prod.quarkus.redis.max-pool-size=50
%prod.quarkus.log.level=WARN
%prod.quarkus.log.category."com.skishop.cart".level=INFO
